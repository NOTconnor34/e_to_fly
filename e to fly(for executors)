--// CONFIGURATION \\--

local TOGGLE_KEY = Enum.KeyCode.E
local WIND_SOUND = true
local FLY_FORCE = 120

local players = game:GetService("Players")
local userInput = game:GetService("UserInputService")
local runService = game:GetService("RunService")
local tween = game:GetService("TweenService")
local localPlayer = players.LocalPlayer
local camera = workspace.CurrentCamera

local function getCharacter()
	repeat wait() until localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
	return localPlayer.Character
end

local char = getCharacter()
local humanoid = char:WaitForChild("Humanoid")
local root = char:WaitForChild("HumanoidRootPart")

local bv = Instance.new("BodyVelocity")
bv.MaxForce = Vector3.new(1, 1, 1) * 1e5
bv.Velocity = Vector3.zero
bv.P = 1250

local bg = Instance.new("BodyGyro")
bg.MaxTorque = Vector3.new(1, 1, 1) * 1e5
bg.P = 3000
bg.CFrame = root.CFrame

local flyState = Instance.new("BoolValue")
flyState.Name = "Flymoving"
flyState.Value = false

local snd = Instance.new("Sound")
snd.Name = "WindSound"
snd.SoundId = "rbxassetid://3308152153"
snd.Volume = WIND_SOUND and 1 or 0
snd.Looped = true
snd.Parent = root

local isFlying = false

local function movementDirection()
	if humanoid.MoveDirection.Magnitude == 0 then return Vector3.zero end
	local lookDir = Vector3.new(camera.CFrame.LookVector.X, 0, camera.CFrame.LookVector.Z)
	local projected = CFrame.new(camera.CFrame.Position, camera.CFrame.Position + lookDir):VectorToObjectSpace(humanoid.MoveDirection)
	local worldVec = (camera.CFrame * CFrame.new(projected)).Position - camera.CFrame.Position
	return worldVec.Magnitude > 0 and worldVec.Unit or Vector3.zero
end

local function toggleStates(enable)
	humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, enable)
	humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, enable)
	humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, enable)
	humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, enable)
end

runService.RenderStepped:Connect(function()
	if isFlying then
		humanoid:ChangeState(Enum.HumanoidStateType.Physics)
		bg.CFrame = camera.CFrame
		local dir = movementDirection()
		flyState.Value = dir ~= Vector3.zero
		tween:Create(bv, TweenInfo.new(0.25), {Velocity = dir * FLY_FORCE}):Play()
	end
end)

flyState.Changed:Connect(function(active)
	if active then
		tween:Create(camera, TweenInfo.new(0.5), {FieldOfView = 100}):Play()
		snd:Play()
	else
		tween:Create(camera, TweenInfo.new(0.5), {FieldOfView = 70}):Play()
		snd:Stop()
	end
end)

userInput.InputBegan:Connect(function(input, processed)
	if processed or input.KeyCode ~= TOGGLE_KEY then return end
	if not isFlying then
		isFlying = true
		toggleStates(false)
		if root:FindFirstChild("Running") then
			root.Running.Volume = 0
		end
		bv.Parent, bg.Parent = root, root
	else
		isFlying = false
		flyState.Value = false
		toggleStates(true)
		if root:FindFirstChild("Running") then
			root.Running.Volume = 0.65
		end
		humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
		bv.Parent, bg.Parent = nil, nil
	end
end)
